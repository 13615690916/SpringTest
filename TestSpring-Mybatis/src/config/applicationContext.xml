<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
    
    <!-- 扫描类包，将标注Spring注解的类自动转化Bean，同时完成Bean的注入 -->
    <context:component-scan base-package="com.smart.*.dao"/>
    <context:component-scan base-package="com.smart.*.service"/>
    
    <!-- 引入外置文件 -->  
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="location" value="classpath:jdbc.properties"/>  
    </bean>
    
    <!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close" >
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="url" value="${jdbc.url}"></property> 
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property> 
	</bean>
	
	 <!-- spring和MyBatis完美整合 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <!-- 指定数据源 -->  
        <property name="dataSource" ref="dataSource"/>  
        <!-- 具体指定xml文件，可不配 -->  
        <property name="configLocation" value="classpath:config/mybatis-config.xml"/>  
        <!-- 自动扫描mapping.xml文件，**表示迭代查找 ,,也可在mybatis-config.xml中单独指定xml文件 -->  
        <!-- <property name="mapperLocations" value="classpath*:com/smart/mappers/**/*.xml"/> -->  
        <property name="mapperLocations" value="classpath*:com/smart/**/mappers/*.xml"/>
    </bean>  
    
    <bean id="userDao" class="org.mybatis.spring.mapper.MapperFactoryBean">  
     	<property name="mapperInterface" value="com.smart.user.dao.UserDao"></property>  
     	<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>  
 	</bean>
 	
 	<!-- 通过set get 注入 -->
 	<!-- 如果输入的字符串包含&、<、>、"、 '则需要用![CDATA[]]将字符串括起来   如 ![CDATA[红旗&CA72]] -->
 	<!-- 如果注入的是空值   则需要 使用  <null/> -->
 	<bean id="car" class="com.smart.car.model.Car">
 		<property name="maxSpeed"><value>200</value></property>
 		<property name="brand"><value>红旗CA72</value></property>
 		<property name="price"><value>20000.00</value></property>
 		
 		<!-- <property name="brand"><null/></property>
 		<property name="brand"><value>![CDATA[红旗&CA72]]</value></property> -->
 	</bean>
 	
    <!-- 通过构造函数注入 需要通过type指定参数类型 -->
    <!-- <bean id="car1" class="com.smart.car.model.Car">
    	<constructor-arg type="int">
    		<value>300</value>
    	</constructor-arg>
    	<constructor-arg type="java.lang.String">
    		<value>奔驰</value>
    	</constructor-arg>
    	<constructor-arg type="double">
    		<value>30000.00</value>
    	</constructor-arg>
    </bean> -->
    
    <!-- 通过索引进行参数配置 -->
	<!-- <bean id="car2" class="com.smart.car.model.Car">
		<constructor-arg index="0" value="400"></constructor-arg>
		<constructor-arg index="1" value="宝马"></constructor-arg>
		<constructor-arg index="2" value="40000.00"></constructor-arg>
	</bean> -->
	
	
	<!-- 通过自身类型反射匹配参数 -->
	<!-- <bean id="boss" class="com.smart.boss.model.Boss">
		<constructor-arg>
			<value>John</value>
		</constructor-arg>
		<constructor-arg>
			<ref bean="car"></ref>
		</constructor-arg>
		<constructor-arg>
			<ref bean="office"></ref>
		</constructor-arg>
	</bean> -->
	
	<!-- private Car car=new Car();级联属性 -->
	<!-- <bean id="boss" class="com.smart.boss.model.Boss">
		<property name="car.brand" value="吉利CT50"></property>
	</bean> -->
	
	
	<!-- private List favorites=new ArrayList(); List属性 -->
	<!-- <bean id="boss" class="com.smart.boss.model.Boss">
		<property name="favorites">
			<list>
				<value>看报</value>
				<value>赛车</value>
				<value>高尔夫</value>
			</list>
		</property>
	</bean> -->
	
	<!-- private Set favorites=new ArrayList(); List属性 -->
	<!-- <bean id="boss" class="com.smart.boss.model.Boss">
		<property name="favorites">
			<set>
				<value>看报</value>
				<value>赛车</value>
				<value>高尔夫</value>
			</set>
		</property>
	</bean> -->
	
	
	<!-- private Map jobs=new HashMap(); Map类型 -->
	<!-- <bean id="" class="">
		<property name="">
			<map>
				<entry>
					<key><value>AM</value></key>
					<value>会见客户</value>
				</entry>
				<entry>
					<key><value>PM</value></key>
					<value>公司内部会议</value>
				</entry>
				如果某一元素的键和值都是对象
				<entry>
					<key><ref bean="keyBean"></ref></key>
					<ref bean="valueBean"></ref>
				</entry>
			</map>
		</property>
	</bean> -->
	
	<!-- private Properties mails=new Properties(); 因为properties只能是字符串 -->
	<!-- <bean id="" class="">
		<property name="mails">
			<props>
				<prop key="jobMail">john-office@smart.com</prop>
				<prop key="liftMail">john-office@smart.com</prop>
			</props>
		</property> 
	</bean>-->
	
	<!-- private Map<String,Integer> jobTime=new HashMap<String,Integer>; -->
	<!-- <property name="">
			<map>
				<entry>
					<key><value>AM</value></key>
					<value>会见客户</value>
				</entry>
				<entry>
					<key><value>PM</value></key>
					<value>公司内部会议</value>
				</entry>
				如果某一元素的键和值都是对象
				<entry>
					<key><ref bean="keyBean"></ref></key>
					<ref bean="valueBean"></ref>
				</entry>
			</map>
		</property> -->
	
	<!-- 配置Jdbc模板  -->
	<!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="dataSource" /> -->
		
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
		
	<!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="serviceMethod"
			expression="(execution(* com.smart.service..*(..))) and (@annotation(org.springframework.transaction.annotation.Transactional))" />
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
</beans>
